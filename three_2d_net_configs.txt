if mconf.modelType == 'tog' then
  -- Small model.
  osize = {16, 32, 32, 64, 64, 32, 1}  -- Conv # output features.
  ksize = {5, 5, 5, 5, 1, 1, 3}  -- Conv filter size.
  psize = {2, 1, 1, 1, 1, 1, 1}  -- pooling decimation size (1: no pooling)
  usize = {1, 1, 1, 1, 1, 1, 2}  -- upsampling size (1 == no upsampling).
  rank = {2, 2, 2, 2, 2, 2, 2}
  gatedConv = {false, false, false, false, false, false, false}
  interFeats = {nil, nil, nil, nil, nil, nil, nil}

  -- Note: upsampling is done WITHIN the conv layer (using
  -- SpatialConvolutionUpsampling or VolumetricConvolutionUpsampling).
  -- Therefore you "can" have both upsampling AND pooling in the same layer,
  -- however this would be silly and so I assert against it (because it's
  -- probably a mistake).
elseif mconf.modelType == 'default' then
  osize = {16, 16, 16, 16, 1}  -- Conv # output features.
  ksize = {3, 3, 3, 3, 1}  -- Conv filter size.
  psize = {1, 1, 1, 1, 1}  -- pooling decimation size (1: no pooling)
  usize = {1, 1, 1, 1, 1}  -- upsampling size (1 == no upsampling).
  rank = {2, 2, 2, 2, 2}
  gatedConv = {false, false, false, false, false}
  interFeats = {nil, nil, nil, nil, nil}
elseif mconf.modelType == 'yang' then
  -- From the paper: Data-driven projection method in fluid
  -- simulation, Yang et al., 2016.
  -- "In this paper, the neural network has three hidden layers and six
  -- neurons per hidden layer."

  -- Note: the Yang paper defines a per-patch network, however this can
  -- be exactly mplemented as a "fully-convolutional" network with 1x1x1
  -- stages for the remaining hidden convolution layers.
  -- They also use only the surrounding neighbor pixels as input context,
  -- with p, divergence and flags as input.
  torch.checkYangSettings(mconf)
  osize = {6, 6, 6, 1}
  ksize = {3, 1, 1, 1}  -- They define a per patch network, whic
  psize = {1, 1, 1, 1}  -- They do not pool or upsample
  usize = {1, 1, 1, 1}  -- They do not pool or upsample
  rank = {2, 2, 2, 2}  -- Always full rank.
  gatedConv = {false, false, false, false}
  interFeats = {nil, nil, nil, nil}
else
  error('Incorrect modelType for 2D model.')
end